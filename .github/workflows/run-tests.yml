name: e2e (Playwright) and unit test (custom)

on:
  push:
    branches: [main]

concurrency: production_environment

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout ⚙️ # Step 1
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers 🐳
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('_docker/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and cache Docker images 🏗️
        run: |
          # Build images with cache
          docker buildx build \
            --file _docker/app.docker \
            --tag practice-software-testing_laravel-api \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            _docker

          docker buildx build \
            --file _docker/ui.docker \
            --tag practice-software-testing_angular-ui \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            _docker

          docker buildx build \
            --file _docker/web.docker \
            --tag practice-software-testing_web \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            _docker

          # Move cache
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Start containers 🐳 # Step 2
        run: |
          export DISABLE_LOGGING=true
          export SPRINT_FOLDER=sprint5-with-bugs
          docker compose -f docker-compose.yml up -d
      - name: Sleep for 60 seconds # Step 3
        run: sleep 60s
        shell: bash
      - name: Create & Seed database 🌱 # Step 4
        run: |
          docker compose exec -T laravel-api php artisan migrate:refresh --seed
      - name: GET Version # Step 5
        run: curl -v -X GET 'http://localhost:8091/status'
      - name: POST login # Step 6
        run: |
          curl -v -X POST 'http://localhost:8091/users/login' \
          -H 'Content-Type: application/json' \
          --data-raw '{"email":"customer@practicesoftwaretesting.com","password":"welcome01"}'

      # Laravel API Tests
      - name: Setup PHP for API tests 🐘
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
      - name: Install API Dependencies 📦
        run: |
          cd sprint5-with-bugs/API
          sudo chown -R $USER:$USER .
          composer install --no-progress --prefer-dist --no-interaction

      # Angular UI Tests
      - name: Install node ⚙️ # Step 7
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install UI Dependencies 📦
        run: |
          cd sprint5-with-bugs/UI
          npm ci
          PLAYWRIGHT_VERSION=$(npm ls --json @playwright/test | jq --raw-output '.dependencies["@playwright/test"].version')
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Run Angular Unit Tests 🧪
        run: |
          cd sprint5-with-bugs/UI
          npm run test -- --watch=false --browsers=ChromeHeadless

      # Cache browser binaries, cache key is based on Playwright version and OS
      - name: 🧰 Cache Playwright browser binaries # Step 9
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: "~/.cache/ms-playwright"
          key: "${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}"
          restore-keys: |
            ${{ runner.os }}-playwright-

      # Install browser binaries & OS dependencies if cache missed
      - name: 🏗 Install Playwright browser binaries & OS dependencies # Step 10
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          npx playwright install --with-deps

      # Install only the OS dependencies if cache hit
      - name: 🏗 Install Playwright OS dependencies # Step 11
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: |
          npx playwright install-deps
      - name: Run Playwright E2E tests 🧪 # Step 12
        run: |
          cd sprint5-with-bugs/UI
          npx playwright test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report 📊
          path: sprint5-with-bugs/UI/playwright-report/
          retention-days: 10
